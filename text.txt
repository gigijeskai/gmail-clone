// single element

document.getElementById('element')
document.querySelector('.element') or ('#element') 

// multiple element
// generano una lista di elementi

document.querySelectorAll('.element') or ('#element') 
document.getElementsByClassName('element')
element[0].style.color = 'black'
element[1].innerText = 'hello'
document.getElementsByTagName('li')


--------------------------------------------------------------------------------------------------


// ciclo forEach()
// applica per tutti gli elementi element di una lista la funzione 

element.forEach(element) => console.log(element)





// ciclo for()

for(let i = 0; i < array.length; i++){
    let item = array[i]
}



--------------------------------------------------------------------------------------------------



// selected target element

ul.lastElementChild.remove()                 // seleziona solo l'ultimo
ul.firstElementChild.textContent = 'hello'   // seleziona solo il primo
ul.children[1].innerText = 'hi'              // seleziona solo il figlio all'indice 1 di ul


--------------------------------------------------------------------------------------------------




// addEventListener()

const btn = document.querySelector('.btn') 
btn.addEventListener('click',(e) =>{ e.preventDefault()})

// per collegarlo ad un bottone javascript
let button = document.getElementById('button').addEventListener
('click',function(){
    console.log(123)
})

//oppure
let button = document.getElementById('button').addEventListener
('click',buttonClick)
})

function buttonClick(){
    console.log('button clicked')
}


e.preventDefault() //si utilizza per evitare un comportamento di default di un evento


--------------------------------------------------------------------------------------------------





// selected odd or even element with circle

let odd = document.querySelectorAll('li:nth-child(odd)');
let even = document.querySelectorAll('li:nth-child(even)');

for(let i = 0; i < odd.length; i++){
    odd[i].style.backgroundColor = '#f4f4f4';
    even[i].style.backgroundColor = '#ccc';
}


--------------------------------------------------------------------------------------------------





// DOM traversing

let itemList = document.querySelector('#items')

itemList.parentNode               // seleziona il genitore dell'elemento
itemList.parentElement            // seleziona il genitore dell'elemento
itemList.childNodes               // seleziona i figli dell'elemento
itemList.children                 // seleziona un figlio dell'elemento
itemList.children[]               // seleziona un figlio dell'elemento
itemList.firstChild               // seleziona il primo nodo figlio dell'elemento e può trattarsi anche di un testo o commento
itemList.firstElementChild        // seleziona il primo nodo elemento figlio dell'elemento selezionato non include il contenuto
itemList.lastChild                // seleziona l'ultimo nodo figlio dell'elemento e può trattarsi anche di un testo o commento
itemList.lastElementChild         // seleziona l'ultimo nodo elemento figlio dell'elemento selezionato non include il contenuto
itemList.nextSibling              // seleziona il nodo fratello dell'elemento e può trattarsi anche di un testo o commento
itemList.nextElementSibling       // seleziona il nodo fratello dell'elemento selezionato non include il contenuto
itemList.priviusSibling           // seleziona il nodo fratello successivo dell'elemento e può trattarsi anche di un testo o commento
itemList.priviusElementSibling    // seleziona il nodo fratello successivo dell'elemento selezionato non include il contenuto



--------------------------------------------------------------------------------------------------






// CREATE element

let newDiv = documet.createElement('div')   // crea un nuovo elemento
newDiv.className = 'hello'                  // crea una nuova classe
newDiv.serAttribute('title', 'hello')       // crea un nuovo attributo e prende come parametri l'attributo che si vuole creare e il valore

var newDivText = document.createTextNode('hello')   // crea un nuovo elemento di testo
 
newDiv.appendChild(newDivText)     // consente di aggiungere a un nodo genitore un nodo figlio alla fine dell'elenco

let container = document.querySelector('header .container')
var h1 = document.querySelector('header h1')
container.insertBefore(newDiv, h1)  // consente di inserire un nodo figlio in un nodo già esistente aggiungendolo prima, come parametri prende l'elemento da aggiungere e il contenitore a cui deve essere appeso




--------------------------------------------------------------------------------------------------



// ADDING ITEM list

let form = document.getElementById('addForm')
let itemList = document.getElementById('items')

// form submit event
form.addEventListener('submit', addItem)

function addItem(e){
    e.preventDefault()

// get input value
    let newItem = document.getElementById('item').value

    // create new li element
    let li = document.createElement('li')
    // add class
    li.className = 'list-group-item'
    //add text node with input value
    li.appendChild(document.createTextNode(newItem))

    // create del button element
    let deleteBtn = document.createElement('button')

    // add classes to del button
deleteBtn.className = 'btn btn-danger btn-sm  
float-rigth deleteBtn
//append text node
deleteBtn.aooendChild(document.createTextNode('x') )

//append button to li
li.appendChild(deleteBtn)

    itemList.appendChild(li)
}




--------------------------------------------------------------------------------------------------

// ajax

// creazione di un oggetto XMLHttpRequest
var xhr = new XMLHttpRequest();

// impostazione dell'URL della richiesta
var url = "https://api.example.com/data";

// impostazione del metodo della richiesta (GET o POST)
var method = "GET";

// apertura della connessione
xhr.open(method, url);

// impostazione della funzione di callback da chiamare quando la risposta arriva dal server
xhr.onreadystatechange = function () {
    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
        // la chiamata AJAX è andata a buon fine
        console.log(xhr.responseText);
    }
};

// invio della richiesta
xhr.send();



// await 



async function fetchData() {
  const response = await fetch('https://jsonplaceholder.typicode.com/posts');
  const data = await response.json();
  return data;
}

fetchData()
  .then(data => console.log(data))
  .catch(error => console.log(error));
